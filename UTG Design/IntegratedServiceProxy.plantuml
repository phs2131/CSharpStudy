@startuml
left to right direction

actor "연계 시스템" as Src << 안전영역 >>
actor "연계 시스템" as Dst << 비안전영역 >>

rectangle 단방향시스템(TX) {
    package "데이터 처리 모듈" as TDPE {
        usecase "연계 프록시 연동" as TProxy
        usecase "프로토콜 식별 및 통제" as TProtoClassify
        usecase "데이터 무결성 검증" as TDataIntegrityChk
        usecase "데이터 캡슐화" as TDataEncapDecap

        (TProtoClassify) <. (TProxy) 
        (TDataIntegrityChk) <. (TProtoClassify)
        (TDataEncapDecap) <. (TDataIntegrityChk)
    }

    package "데이터 전송 모듈" as TDTE {
        usecase "데이터 암호화" as TDataEncDec
        usecase "단방향 데이터 송신" as TUniDataTransfer

        (TUniDataTransfer) <. (TDataEncDec)
    }

    (TDataEncapDecap) -> (TDataEncDec) : 암호화
    (TDataEncapDecap) -> (TUniDataTransfer) : 비암호화
}

rectangle 단방향시스템(RX) {
    package "데이터 처리 모듈" as RDPE {
        usecase "연계 프록시 연동" as RProxy
        usecase "프로토콜 식별 및 통제" as RProtoClassify
        usecase "데이터 무결성 검증" as RDataIntegrityChk
        usecase "데이터 역캡슐화" as RDataEncapDecap

        (RProtoClassify) .> (RProxy) 
        (RDataIntegrityChk) .> (RProtoClassify)
        (RDataEncapDecap) .> (RDataIntegrityChk)
    }

    package "데이터 전송 모듈" as RDTE {
        usecase "데이터 복호화" as RDataEncDec
        usecase "단방향 데이터 수신" as RUniDataTransfer

        (RDataEncDec) <.left. (RUniDataTransfer)
    }

    (RDataEncapDecap) <- (RUniDataTransfer) : 비암호화
    (RDataEncapDecap) <- (RDataEncDec) : 암호화
}

    Src -- (TProxy)
    (TUniDataTransfer) --> (RUniDataTransfer) : 단방향전송
    (RProxy) -- Dst
@enduml